// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: asset_manager.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Mb {
  public static class Bundle
  {
    static readonly string __ServiceName = "mb.Bundle";

    static readonly Marshaller<global::Mb.BundleRequest> __Marshaller_BundleRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mb.BundleRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Mb.BundleResponse> __Marshaller_BundleResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mb.BundleResponse.Parser.ParseFrom);

    static readonly Method<global::Mb.BundleRequest, global::Mb.BundleResponse> __Method_GetBundle = new Method<global::Mb.BundleRequest, global::Mb.BundleResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetBundle",
        __Marshaller_BundleRequest,
        __Marshaller_BundleResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mb.AssetManagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Bundle</summary>
    public abstract class BundleBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Mb.BundleResponse> GetBundle(global::Mb.BundleRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Bundle</summary>
    public class BundleClient : ClientBase<BundleClient>
    {
      /// <summary>Creates a new client for Bundle</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BundleClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Bundle that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BundleClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BundleClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BundleClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Mb.BundleResponse GetBundle(global::Mb.BundleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBundle(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Mb.BundleResponse GetBundle(global::Mb.BundleRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBundle, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Mb.BundleResponse> GetBundleAsync(global::Mb.BundleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBundleAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Mb.BundleResponse> GetBundleAsync(global::Mb.BundleRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBundle, null, options, request);
      }
      protected override BundleClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BundleClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(BundleBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetBundle, serviceImpl.GetBundle).Build();
    }

  }
  public static class Asset
  {
    static readonly string __ServiceName = "mb.Asset";

    static readonly Marshaller<global::Mb.AssetRequest> __Marshaller_AssetRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mb.AssetRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Mb.AssetResponse> __Marshaller_AssetResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Mb.AssetResponse.Parser.ParseFrom);

    static readonly Method<global::Mb.AssetRequest, global::Mb.AssetResponse> __Method_GetAssets = new Method<global::Mb.AssetRequest, global::Mb.AssetResponse>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "GetAssets",
        __Marshaller_AssetRequest,
        __Marshaller_AssetResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Mb.AssetManagerReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Asset</summary>
    public abstract class AssetBase
    {
      public virtual global::System.Threading.Tasks.Task GetAssets(IAsyncStreamReader<global::Mb.AssetRequest> requestStream, IServerStreamWriter<global::Mb.AssetResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Asset</summary>
    public class AssetClient : ClientBase<AssetClient>
    {
      /// <summary>Creates a new client for Asset</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AssetClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Asset that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AssetClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AssetClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AssetClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual AsyncDuplexStreamingCall<global::Mb.AssetRequest, global::Mb.AssetResponse> GetAssets(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAssets(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::Mb.AssetRequest, global::Mb.AssetResponse> GetAssets(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetAssets, null, options);
      }
      protected override AssetClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AssetClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(AssetBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAssets, serviceImpl.GetAssets).Build();
    }

  }
}
#endregion
